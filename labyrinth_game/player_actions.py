from labyrinth_game.constants import RANDOM_MODULO, ROOMS, TRAP_CHANCE
from labyrinth_game.utils import pseudo_random, random_event, trigger_trap


def show_inventory(game_state):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞."""
    inventory = game_state['player_inventory']
    if inventory:
        print("–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:", ", ".join(inventory))
    else:
        print("–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.")

def get_input(prompt="> "):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        return input(prompt).strip().lower()
    except (KeyboardInterrupt, EOFError):
        print("\n–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã.")
        return "quit"

def move_player(direction, game_state):
    current_room = game_state['current_room']
    room_data = ROOMS[current_room]
    
    if direction in room_data['exits']:
        new_room = room_data['exits'][direction]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —É—Å–ª–æ–≤–∏–π
        is_treasure = new_room == 'treasure_room'
        has_key = 'rusty_key' in game_state['player_inventory']
        
        if is_treasure and not has_key:
            print("–î–≤–µ—Ä—å –∑–∞–ø–µ—Ä—Ç–∞. –ù—É–∂–µ–Ω –∫–ª—é—á, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –¥–∞–ª—å—à–µ.")
            return False
        elif is_treasure and has_key:
            # –°—Ç—Ä–æ–∫–∞ 36:
            msg = "–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–ª—é—á, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å " \
              "–ø—É—Ç—å –≤ –∫–æ–º–Ω–∞—Ç—É —Å–æ–∫—Ä–æ–≤–∏—â."
            print(msg)
            game_state['current_room'] = new_room
            game_state['steps_taken'] += 1
            random_event(game_state)
            print(f"–í—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å {direction}.")
            return True
        else:
            game_state['current_room'] = new_room
            game_state['steps_taken'] += 1
            random_event(game_state)
            print(f"–í—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å {direction}.")
            return True
    else:
        print(f"–ù–µ–ª—å–∑—è –ø–æ–π—Ç–∏ {direction}.")
        return False

def take_item(game_state, item_name):
    current_room = game_state['current_room']
    room_data = ROOMS[current_room]
    
    if item_name == 'treasure_chest':
        print("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–Ω—è—Ç—å —Å—É–Ω–¥—É–∫, –æ–Ω —Å–ª–∏—à–∫–æ–º —Ç—è–∂–µ–ª—ã–π.")
        return False
        
    if item_name in room_data['items']:
        if room_data.get('has_trap', False):
            trap_chance = pseudo_random(game_state['steps_taken'], RANDOM_MODULO)
            if trap_chance < TRAP_CHANCE:
                print("üîÑ –ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–∑—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç...")
                trigger_trap(game_state)
        
        game_state['player_inventory'].append(item_name)
        room_data['items'].remove(item_name)
        print(f"–í—ã –ø–æ–¥–Ω—è–ª–∏: {item_name}")
        return True
    else:
        print("–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∑–¥–µ—Å—å –Ω–µ—Ç.")
        return False

def use_item(game_state, item_name):
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
    inventory = game_state['player_inventory']
    
    if item_name not in inventory:
        print("–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.")
        return False
        
    match item_name:
        case "torch":
            print("–í—ã –∑–∞–∂–∏–≥–∞–µ—Ç–µ —Ñ–∞–∫–µ–ª. –°—Ç–∞–ª–æ —Å–≤–µ—Ç–ª–µ–µ!")
            return True
        case "sword":
            print("–í—ã —Ä–∞–∑–º–∞—Ö–∏–≤–∞–µ—Ç–µ –º–µ—á–æ–º. –ß—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è —É–≤–µ—Ä–µ–Ω–Ω–µ–µ!")
            return True
        case "bronze box":
            print("–í—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç–µ –±—Ä–æ–Ω–∑–æ–≤—É—é —à–∫–∞—Ç—É–ª–∫—É...")
            if "rusty_key" not in inventory:
                inventory.append("rusty_key")
                print("–í–Ω—É—Ç—Ä–∏ –≤—ã –Ω–∞—à–ª–∏ rusty_key!")
            else:
                print("–®–∫–∞—Ç—É–ª–∫–∞ –ø—É—Å—Ç–∞.")
            return True
        case "treasure_chest":
            return attempt_open_treasure(game_state)
        case "mysterious_herb":
            print("–í—ã —Å—ä–µ–¥–∞–µ—Ç–µ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ç—Ä–∞–≤—É. –ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ø—Ä–∏–ª–∏–≤ —Å–∏–ª!")
            inventory.remove(item_name)
            return True
        case "coin":
            print("–í—ã –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ—Ç–µ –º–æ–Ω–µ—Ç–∫—É. –û–Ω–∞ –±–ª–µ—Å—Ç–∏—Ç –Ω–∞ —Å–≤–µ—Ç—É.")
            return True
        case _:
            print("–í—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç.")
            return False

def solve_puzzle(game_state):
    """–†–µ—à–∞–µ—Ç –∑–∞–≥–∞–¥–∫—É –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç–µ"""
    current_room_id = game_state['current_room']
    room_data = ROOMS[current_room_id]
    
    if current_room_id == 'treasure_room':
        return attempt_open_treasure(game_state)
        
    if not room_data['puzzle']:
        print("–ó–∞–≥–∞–¥–æ–∫ –∑–¥–µ—Å—å –Ω–µ—Ç.")
        return False
        
    question, correct_answer = room_data['puzzle']
    print(f"–ó–∞–≥–∞–¥–∫–∞: {question}")
    user_answer = input("–í–∞—à –æ—Ç–≤–µ—Ç: ").strip().lower()

    def check_number_after_nine(answer):
        number_words = {
            '–¥–µ—Å—è—Ç—å': 10, 'ten': 10, '10': 10,
            '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å': 11, 'eleven': 11, '11': 11,
            '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å': 12, 'twelve': 12, '12': 12,
        }
        if answer in number_words:
            number = number_words[answer]
            return number > 9
        try:
            number = int(answer)
            return number > 9
        except ValueError:
            return False

    is_correct = False
    if current_room_id == 'hall':
        is_correct = check_number_after_nine(user_answer)
    else:
        is_correct = user_answer == correct_answer

    if is_correct:
        print("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ó–∞–≥–∞–¥–∫–∞ —Ä–µ—à–µ–Ω–∞.")
        room_data['puzzle'] = None
        
        if current_room_id == 'hall':
            game_state['player_inventory'].append('treasure_key')
            print("–í—ã –ø–æ–ª—É—á–∏–ª–∏ treasure_key!")
        elif current_room_id == 'trap_room':
            game_state['player_inventory'].append('health_potion')
            print("–í—ã –ø–æ–ª—É—á–∏–ª–∏ health_potion!")
        elif current_room_id == 'library':
            game_state['player_inventory'].append('rusty_key')
            print("–í—ã –ø–æ–ª—É—á–∏–ª–∏ rusty_key!")
        return True
    else:
        print("–ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return False

def show_help(commands):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    for cmd, desc in commands.items():
        print(f" {cmd:<16} - {desc}")

def attempt_open_treasure(game_state):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Å—É–Ω–¥—É–∫ —Å —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏"""
    current_room_id = game_state['current_room']
    room_data = ROOMS[current_room_id]
    
    if 'treasure_chest' not in room_data['items']:
        print("–°—É–Ω–¥—É–∫ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return False
        
    inventory = game_state['player_inventory']
    if 'treasure_key' in inventory or 'rusty_key' in inventory:
        print("–í—ã –ø—Ä–∏–º–µ–Ω—è–µ—Ç–µ –∫–ª—é—á, –∏ –∑–∞–º–æ–∫ —â—ë–ª–∫–∞–µ—Ç. –°—É–Ω–¥—É–∫ –æ—Ç–∫—Ä—ã—Ç!")
        room_data['items'].remove('treasure_chest')
        print("–í —Å—É–Ω–¥—É–∫–µ —Å–æ–∫—Ä–æ–≤–∏—â–µ! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!")
        game_state['game_over'] = True
        return True
        
    response = input("–°—É–Ω–¥—É–∫ –∑–∞–ø–µ—Ä—Ç. –í–≤–µ—Å—Ç–∏ –∫–æ–¥? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
    if response == '–¥–∞':
        if room_data['puzzle']:
            question, correct_answer = room_data['puzzle']
            user_code = input(f"{question}: ").strip()
            if user_code == correct_answer:
                print("–ó–∞–º–æ–∫ —â—ë–ª–∫–∞–µ—Ç! –°—É–Ω–¥—É–∫ –æ—Ç–∫—Ä—ã—Ç!")
                room_data['items'].remove('treasure_chest')
                print("–í —Å—É–Ω–¥—É–∫–µ —Å–æ–∫—Ä–æ–≤–∏—â–µ! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!")
                game_state['game_over'] = True
                return True
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.")
                return False
        else:
            print("–ó–¥–µ—Å—å –Ω–µ—Ç –∑–∞–≥–∞–¥–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞.")
            return False
    else:
        print("–í—ã –æ—Ç—Å—Ç—É–ø–∞–µ—Ç–µ –æ—Ç —Å—É–Ω–¥—É–∫–∞.")
        return False