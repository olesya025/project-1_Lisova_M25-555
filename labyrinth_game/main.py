

from labyrinth_game.constants import COMMANDS, ROOMS
from labyrinth_game.player_actions import (
    attempt_open_treasure,
    get_input,
    move_player,
    show_help,
    show_inventory,
    solve_puzzle,
    take_item,
    use_item,
)
from labyrinth_game.utils import describe_current_room, pseudo_random, trigger_trap

game_state = {
    'player_inventory': [],
    'current_room': 'entrance',
    'game_over': False,
    'steps_taken': 0
}

def process_command(game_state, command, commands):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä–æ–∫–∞"""
    parts = command.split()
    if not parts:
        return
    
    main_command = parts[0]
    argument = parts[1] if len(parts) > 1 else None
    
    match main_command:
        case "look" | "–æ—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è":
            describe_current_room(game_state)
        case "inventory" | "–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å":
            show_inventory(game_state)
        case "help" | "–ø–æ–º–æ—â—å":
            show_help(commands)
        case "check" | "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å":
            current_room = game_state['current_room']
            room_data = ROOMS[current_room]
            if room_data.get('has_trap', False):
                trap_chance = pseudo_random(game_state['steps_taken'], 100)
                if trap_chance < 60:
                    trigger_trap(game_state)
                else:
                    msg = "üîç –í—ã –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç–µ –∫–æ–º–Ω–∞—Ç—É –∏ –æ–±–µ–∑–≤—Ä–µ–∂–∏–≤–∞–µ—Ç–µ –ª–æ–≤—É—à–∫—É!"
                    print(msg)
                    room_data['has_trap'] = False
            else:
                print("–í —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –ª–æ–≤—É—à–µ–∫.")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ—Å–ª–æ–∂–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º
        case "go" | "–∏–¥–∏" if argument:
            if argument in ["north", "south", "east", "west", 
                            "—Å–µ–≤–µ—Ä", "—é–≥", "–≤–æ—Å—Ç–æ–∫", "–∑–∞–ø–∞–¥"]:
                direction_map = {
                    "—Å–µ–≤–µ—Ä": "north", "—é–≥": "south",
                    "–≤–æ—Å—Ç–æ–∫": "east", "–∑–∞–ø–∞–¥": "west"
                }
                direction = direction_map.get(argument, argument)
                if move_player(direction, game_state):
                    describe_current_room(game_state)
            else:
                print("–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: north, south, east, west")
        
        # –û–¥–Ω–æ—Å–ª–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–≤–∏–∂–µ–Ω–∏—è
        case "north" | "south" | "east" | "west" | "—Å–µ–≤–µ—Ä" | "—é–≥" | "–≤–æ—Å—Ç–æ–∫" | "–∑–∞–ø–∞–¥":
            direction_map = {
                "—Å–µ–≤–µ—Ä": "north", "—é–≥": "south",
                "–≤–æ—Å—Ç–æ–∫": "east", "–∑–∞–ø–∞–¥": "west"
            }
            direction = direction_map.get(main_command, main_command)
            if move_player(direction, game_state):
                describe_current_room(game_state)
        
        case "take" | "–≤–∑—è—Ç—å" if argument:
            take_item(game_state, argument)
        case "use" | "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å" if argument:
            use_item(game_state, argument)
        case "solve" | "—Ä–µ—à–∏—Ç—å":
            if game_state['current_room'] == 'treasure_room':
                attempt_open_treasure(game_state)
            else:
                solve_puzzle(game_state)
        case "quit" | "–≤—ã—Ö–æ–¥":
            print("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            game_state['game_over'] = True
        case _:
            print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")


def main():
    
    print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–∞–±–∏—Ä–∏–Ω—Ç —Å–æ–∫—Ä–æ–≤–∏—â!")
    describe_current_room(game_state)
    
    while not game_state['game_over']:
        command = get_input("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ")
        process_command(game_state, command, COMMANDS)  

if __name__ == "__main__":
    main()