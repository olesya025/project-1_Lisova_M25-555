import math

from labyrinth_game.constants import DAMAGE_CHANCE, EVENT_PROBABILITY, ROOMS


def pseudo_random(seed, modulo):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, modulo]"""
    value = math.sin(seed * 12.9898) * 43758.5453
    fractional = value - math.floor(value)
    return int(fractional * modulo)

def describe_current_room(game_state):
    """–í—ã–≤–æ–¥–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã."""
    current_room_id = game_state['current_room']
    room_data = ROOMS[current_room_id]
    room_name = current_room_id.replace('_', ' ').title()
    
    print(f"\n== {room_name.upper()} ==")
    print(room_data['description'])
    
    if room_data['items']:
        print("–ó–∞–º–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:", ", ".join(room_data['items']))
    
    exits = list(room_data['exits'].keys())
    print("–í—ã—Ö–æ–¥—ã:", ", ".join(exits))
    
    if room_data['puzzle']:
        print("–ö–∞–∂–µ—Ç—Å—è, –∑–¥–µ—Å—å –µ—Å—Ç—å –∑–∞–≥–∞–¥–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É solve).")
    
    if room_data.get('has_trap', False):
        print("‚ö†Ô∏è –í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, —á—Ç–æ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≤—É—à–∫–∞!")

def trigger_trap(game_state):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ª–æ–≤—É—à–∫—É —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞"""
    print("üí• –õ–æ–≤—É—à–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –ü–æ–ª —Å—Ç–∞–ª –¥—Ä–æ–∂–∞—Ç—å...")
    
    inventory = game_state['player_inventory']
    if inventory:
        items_count = len(inventory)
        random_index = pseudo_random(game_state['steps_taken'], items_count)
        lost_item = inventory.pop(random_index)
        print(f"üò± –í —Å—É–º–∞—Ç–æ—Ö–µ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏: {lost_item}!")
        return True
    else:
        damage_chance = pseudo_random(game_state['steps_taken'], 10)
        if damage_chance < DAMAGE_CHANCE:
            print("üíÄ –í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –∏–∑–±–µ–∂–∞—Ç—å –ª–æ–≤—É—à–∫–∏ –∏ –ø–æ–≥–∏–±–ª–∏... –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!")
            game_state['game_over'] = True
            return True
        else:
            print("üéØ –í–∞–º —É–¥–∞–ª–æ—Å—å —É–≤–µ—Ä–Ω—É—Ç—å—Å—è –æ—Ç –ª–æ–≤—É—à–∫–∏! "
                  "–í—ã —É—Ü–µ–ª–µ–ª–∏, –Ω–æ —ç—Ç–æ –±—ã–ª–æ –±–ª–∏–∑–∫–æ.")
            return False

def random_event(game_state):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞"""
    event_occurrence = pseudo_random(game_state['steps_taken'], EVENT_PROBABILITY)
    if event_occurrence != 0:
        return False
    
    event_type = pseudo_random(game_state['steps_taken'] + 1, 3)
    
    if event_type == 0:
        current_room = game_state['current_room']
        room_data = ROOMS[current_room]
        print("üí∞ –í—ã –∑–∞–º–µ—Ç–∏–ª–∏ —á—Ç–æ-—Ç–æ –±–ª–µ—Å—Ç—è—â–µ–µ –Ω–∞ –ø–æ–ª—É...")
        room_data['items'].append('coin')
        print("–ù–∞ –ø–æ–ª—É –ª–µ–∂–∏—Ç –º–æ–Ω–µ—Ç–∫–∞! –û–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–º–Ω–∞—Ç—É.")
        return True
    elif event_type == 1:
        print("üëÇ –í—ã —Å–ª—ã—à–∏—Ç–µ —Å—Ç—Ä–∞–Ω–Ω—ã–π —à–æ—Ä–æ—Ö –∏–∑ —Ç–µ–º–Ω–æ—Ç—ã...")
        if 'sword' in game_state['player_inventory']:
            print("‚öîÔ∏è –í—ã –¥–æ—Å—Ç–∞—ë—Ç–µ –º–µ—á, –∏ —à–æ—Ä–æ—Ö –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —Å—Ç–∏—Ö–∞–µ—Ç!")
        else:
            print("–í—ã –∑–∞–º–∏—Ä–∞–µ—Ç–µ –æ—Ç —Å—Ç—Ä–∞—Ö–∞, –Ω–æ —à–æ—Ä–æ—Ö –≤—Å–∫–æ—Ä–µ –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è.")
        return True
    elif event_type == 2:
        current_room = game_state['current_room']
        if (current_room == 'trap_room' and 
            'torch' not in game_state['player_inventory']):
            print("üåë –í —Ç–µ–º–Ω–æ—Ç–µ –≤—ã –Ω–µ –∑–∞–º–µ—Ç–∏–ª–∏ –ª–æ–≤—É—à–∫—É –ø–æ–¥ –Ω–æ–≥–∞–º–∏!")
            return trigger_trap(game_state)
        else:
            print("üåÄ –í—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ –ª—ë–≥–∫–∏–π –≤–µ—Ç–µ—Ä–æ–∫, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ.")
            return True
    
    return False